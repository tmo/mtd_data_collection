import sys
import subprocess
import logging
import time
import os

# TODO should I make this a class?

def get_cookie():
    # TODO take in host ect
    cookie_file = "cook2.json"
    host = "http://192.168.40.132/dvwa/login.php"
    osinput = "wapiti-getcookie -c {cookie} -u  {host}"
    osinput = osinput.format(
        host = "http://192.168.40.132/dvwa/login.php",
        cookie = cookie_file,
    )
    logging.info("Running command... " + osinput)
    r = subprocess.Popen(["wapiti-getcookie", "-c", cookie_file, "-u", host], 
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    out = r.communicate(input=b"0\nadmin\npassword\n\n")

    # Set security to low
    import json
    with open("./"+cookie_file, 'r') as f:  
        content = json.load(f)    
        content[list(content.keys())[0]]["/dvwa"]["security"]["value"]="low"
    with open("./"+cookie_file, 'w') as f:  
        json.dump(content, f)
    return cookie_file

def wapiti_scan(host=None, cookie=None, exclude=None, modules=None,
                print_output=True, os_output=False):
    if not host:
        host = "http://192.168.40.132/dvwa/"
    if not exclude:
        exclude = host+"logout.php"
        # exclude = "http://192.168.40.132/dvwa/logout.php"
    if not cookie:
        cookie = get_cookie()
    if not modules:
        modules = "sql,xss"
    scan_time = time.strftime("%Y%m%d_%H%m")
    result_file = "./results/{}.json".format(scan_time)
    # TODO add --flush-session
    osinput = "wapiti  -u  {host} -c {cookie} -x {exclude} -m {modules} " + \
                "-f {format} -o {output} --flush-session"
    osinput = osinput.format(
        host = host,
        cookie = cookie,
        exclude = exclude,
        modules = modules,
        format = "json",
        output = result_file
    )

    osinput_mod = osinput
    if not os_output:
        osinput_mod += "> ./results/osoutout"
    logging.info("Running command... " + osinput_mod)
    start = time.time()
    r = os.system(osinput_mod)
    end = time.time()
    if print_output:
        print("2,{},{},{}".format(end-start, osinput,
        result_file))
    
    result = {
        "stage":2,
        "time":end-start, 
        "settings": osinput,
        "results":get_wapiti_results(result_file)
    }
    return result

def get_wapiti_results(result_file):
    with open(result_file, 'r') as f:      
        content = eval(f.read())
    vuls = content["vulnerabilities"]
    #print(vuls.keys())
    #print(len(vuls))
    
    ## number of vulnerabilities in each catagory
    #for key in vuls.keys():
    #    print(key, len(vuls[key]), type(vuls[key]))
    #print(vuls[list(vuls.keys())[0]][0].keys())

    return vuls
